@page "/Cobros/Index"
@rendermode InteractiveServer
@inject DeudoresService deudorService
@inject PrestamoService prestamoService
@inject CobroService cobroService
@inject NavigationManager navigation


<PageTitle>Registro de Cobros</PageTitle>
<div class="container card shadow-lg">
	<div class="card-header text-center">
		<h5><strong>Registro de cobros</strong></h5>
	</div>
	<div class="card-body">

		<div class="col-md-3 d-flex align-items-end justify-content-md-start mt-3 mt-md-0">
			<a href="/Cobros/Create" class="btn btn-primary bi bi-plus-circle-fill"> Crear</a>
		</div>
	</div>

	<div class="row text-right">
		<div class="col-md-3">
			<label class="from-label" id="filtro"><strong>Filtrar por:</strong></label>
			<InputSelect for="filtro" class="form-select" @bind-Value="filtro">
				<option value="CobroID">Prestamo ID</option>
				<option value="fecha">Fecha</option>
			</InputSelect>
		</div>


		<div class="col-md-6">
			<label for="valorFiltro" class="form-label"><strong>B&uacute;squeda</strong></label>
			<div class="input-group">
				<InputText id="valorFiltro" @bind-Value="valorFiltro" class="form-control" placeHolder="Buscar" />
				<button @onclick="Buscar" class="btn btn-outline-success bi bi-search" type="button"> Buscar</button>
			</div>
		</div>

		<div class="card-body">
			<table class="table table-light table-bordered">
				<thead class="table table-striped text-center table-bordered mt-3">
					<tr>
						<th>Cobro ID</th>
						<th>Fecha</th>
						<th>Deudor</th>
						<th>Monto</th>
						<th>Ver</th>
						<th>Editar</th>
						<th>Eliminar</th>
					</tr>
				</thead>

				<tbody>

					@foreach (var cobro in cobros)
					{
						//var deudor = deudores.FirstOrDefault(d => d.DeudorId == prestamo.DeudorId);
						<tr>

							<td class="text-center">@cobro.CobroId</td>
							<td class="text-center">@cobro.fecha</td>
							<td class="text-center">@cobro.Deudores.nombre</td>
							<td class="text-center">@cobro.Monto$</td>
	


							<td class="text-center">
								<a href="/Cobros/Details/@cobro.CobroId " class="btn btn-outline-info bi bi-eye-fill"></a>
							</td>

							<td class="text-center">
								<a href="/Cobros/Edit/@cobro.CobroId " class="btn btn-outline-warning bi bi-pencil-square"></a>
							</td>

							<td class="text-center">
								<a href="/Cobros/Delete/@cobro.CobroId " class="btn btn-outline-danger bi bi-trash"></a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

</div>




@code {

	public List<Prestamos> prestamos = new List<Prestamos>();
	public List<Cobros> cobros { get; set; } = new List<Cobros>();
	public List<Deudores> deudores { get; set; } = new List<Deudores>();
	public string filtro = "id";
	public string valorFiltro = "";


	protected override async Task OnInitializedAsync()
	{
		prestamos = await prestamoService.Listar(p => true);
		cobros = await cobroService.Listar(c => true);
	}

	private async Task Buscar()
	{
		if (!string.IsNullOrWhiteSpace(valorFiltro))
		{
			if (filtro == "PrestamoID" && int.TryParse(valorFiltro, out int prestamoid))
			{
				prestamos = await prestamoService.Listar(v => v.PrestamoId == prestamoid);
			}
			if (filtro == "Monto" && int.TryParse(valorFiltro, out int monto))
			{
				prestamos = await prestamoService.Listar(v => v.monto == monto);
			}
			else if (filtro == "Concepto")
			{
				prestamos = await prestamoService.Listar(v => v.Concepto.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase));
			}

		}

	}


}


