@page "/Prestamos/Edit/{PrestamoId:int}"
@rendermode InteractiveServer
@inject DeudoresService deudoresService
@inject PrestamoService prestamoService
@inject NavigationManager navigation


<PageTitle>Crear Prestamo</PageTitle>
<EditForm Model="prestamos" OnValidSubmit="Modificar">

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header bg-success text-white text-center">
				<h3><strong>Crear nuevo prestamo</strong></h3>
			</div>

			<div class="card-body">
			
				<label class="form-label" for="id"><strong>Prestamo ID</strong></label>
				<InputNumber id="id" class="form-control" @bind-Value="prestamos.PrestamoId" readonly></InputNumber>

	
				<label class="form-label" for="Deudor"><strong>Deudor</strong></label>
					<InputSelect id="Deudor" class="form-control" @bind-Value="prestamos.DeudorId">
						<option value="0" selected disabled>Elija una Opci&oacute;n</option>
						@foreach (var deudor in deudores)
						{
							<option value="@deudor.DeudorId">@deudor.nombre</option>
						}
					</InputSelect>
					<ValidationMessage For="(() => prestamos.deudor)" />

				<label class="form-label" for="concepto"><strong>Concepto</strong></label>
				<InputText id="concepto" class="form-control" @bind-Value="prestamos.Concepto"></InputText>
				<ValidationMessage For="@(() => prestamos.Concepto)"></ValidationMessage>

				<label class="form-label" for="monto"><strong>Monto</strong></label>
				<InputNumber id="monto" class="form-control" @bind-Value="prestamos.monto"></InputNumber>
				<ValidationMessage For="@(() => prestamos.monto)"></ValidationMessage>

				
				<label class="form-label" for="monto"><strong>Balance</strong></label>
				<InputNumber id="balance" class="form-control" @bind-Value="prestamos.balance"></InputNumber>
				<ValidationMessage For="@(()=>prestamos.balance)"></ValidationMessage>

				<div class="card-footer">
					<button type="submit" class="btn btn-success bi bi-floppy-fill"> Guardar</button>
					<a href="/Prestamos/Index" class="btn btn-info bi bi-arrow-90deg-left"> Volver</a>
				</div>

			</div>
		</div>
	</div>		
</EditForm>


@code {

	[Parameter]
	public int PrestamoId { get; set; }
	public List<Deudores> deudores { get; set; } = new List<Deudores>();
	public Prestamos prestamos { get; set; } = new Prestamos();
	public List<Prestamos> prestamosList { get; set; } = new List<Prestamos>();
	public bool Repetido;


	protected override async Task OnInitializedAsync()
	{
		if(PrestamoId > 0)
		{
			prestamos = await prestamoService.Buscar(PrestamoId);

		}
		deudores = await deudoresService.ObtenerEntidadAsync();
	}


	public async Task<bool> Validar()
	{
		var existePrestamo = await prestamoService.Buscar(prestamos.PrestamoId);
		Repetido = existePrestamo == null;
		return Repetido;
	}


	public async Task Modificar()
	{
		if(!await Validar())
		{
			await prestamoService.Guardar(prestamos);
			prestamos = new Prestamos();
			navigation.NavigateTo("/prestamos/Index");

		}
	}
}
